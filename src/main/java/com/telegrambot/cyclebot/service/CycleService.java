package com.telegrambot.cyclebot.service;

import com.telegrambot.cyclebot.model.Cycle;
import com.telegrambot.cyclebot.model.User;
import com.telegrambot.cyclebot.repositories.CycleRepository;
import com.telegrambot.cyclebot.repositories.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class CycleService {

    private final UserService userService;
    private final CycleRepository cycleRepository;
    private final UserRepository userRepository;

    public String startNewCycle(Long chatId, LocalDate startDate) {
        try {
            User user = userService.getUser(chatId);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏–∫–ª
            Cycle cycle = new Cycle();
            cycle.setUser(user);
            cycle.setStartDate(startDate);
            cycle.setCycleLength(user.getCycleLength());

            // –ü–†–ê–í–ò–õ–¨–ù–´–ï —Ä–∞—Å—á–µ—Ç—ã
            LocalDate nextPeriod = startDate.plusDays(user.getCycleLength());
            LocalDate ovulation = nextPeriod.minusDays(user.getOvulationOffset());

            cycle.setPredictedNextStart(nextPeriod);
            cycleRepository.save(cycle);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ü–†–ê–í–ò–õ–¨–ù–û
            user.setLastPeriodStart(startDate);
            user.setNextPeriodStart(nextPeriod);
            user.setOvulationDate(ovulation);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userService.saveUser(user);

            return String.format("""
                ‚úÖ –¶–∏–∫–ª –Ω–∞—á–∞—Ç %s
                
                üìÖ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                    startDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    nextPeriod.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    ovulation.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength());

        } catch (Exception e) {
            log.error("Error starting cycle for user {}", chatId, e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ü–∏–∫–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.";
        }
    }

    public String setCycleLength(Long chatId, Integer cycleLength) {
        try {
            if (cycleLength < 21 || cycleLength > 35) {
                return "‚ùå –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 21 –¥–æ 35 –¥–Ω–µ–π.";
            }

            // –í–ê–ñ–ù–û: –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
            User user = userRepository.findById(chatId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            Integer oldLength = user.getCycleLength();
            user.setCycleLength(cycleLength);

            // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –µ—Å–ª–∏ —Ü–∏–∫–ª —É–∂–µ –Ω–∞—á–∞—Ç
            if (user.getLastPeriodStart() != null) {
                updateCyclePredictions(user);
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userRepository.save(user);

            if (user.getLastPeriodStart() != null) {
                return String.format("""
                    ‚úÖ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!
                    
                    üìè –ë—ã–ª–æ: %d –¥–Ω–µ–π
                    üìè –°—Ç–∞–ª–æ: %d –¥–Ω–µ–π
                    
                    üîÑ –ù–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã:
                    ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                    üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                    
                    üí° –û–≤—É–ª—è—Ü–∏—è —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –∫–∞–∫: –¥–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ - 14 –¥–Ω–µ–π""",
                        oldLength, cycleLength,
                        user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                        user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));
            } else {
                return String.format("""
                    ‚úÖ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %d –¥–Ω–µ–π
                    
                    üí° –ö–æ–≥–¥–∞ –≤—ã –Ω–∞—á–Ω–µ—Ç–µ —Ü–∏–∫–ª (/startperiod), —Ä–∞—Å—á–µ—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –¥–ª–∏–Ω—É.
                    üéØ –û–≤—É–ª—è—Ü–∏—è –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (—Ü–∏–∫–ª - 14 –¥–Ω–µ–π)""",
                        cycleLength);
            }
        } catch (Exception e) {
            log.error("Error setting cycle length for user {}", chatId, e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–ª–∏–Ω—ã —Ü–∏–∫–ª–∞.";
        }
    }

    public String markPeriodEnd(Long chatId, LocalDate endDate) {
        try {
            User user = userService.getUser(chatId);

            if (user.getLastPeriodStart() == null) {
                return """
                   ‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –Ω–∞—á–∞—Ç—å —Ü–∏–∫–ª!
                   
                   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –Ω–∞—á–∞–ª–æ –º–µ—Å—è—á–Ω—ã—Ö.""";
            }

            if (endDate.isBefore(user.getLastPeriodStart())) {
                return "‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—á–Ω—ã—Ö.";
            }

            user.setLastPeriodEnd(endDate);

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–µ—Å—è—á–Ω—ã—Ö
            long periodLength = ChronoUnit.DAYS.between(user.getLastPeriodStart(), endDate) + 1;
            user.setPeriodLength((int) periodLength);

            userService.registerUser(new org.telegram.telegrambots.meta.api.objects.User(
                    user.getChatId(), user.getFirstName(), false,
                    user.getLastName(), user.getUsername(), null, false, false, false, false, false
            ), user.getChatId());

            return String.format("""
                ‚úÖ –ö–æ–Ω–µ—Ü –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç–º–µ—á–µ–Ω!
                
                üìÖ –ù–∞—á–∞–ª–æ: %s
                üìÖ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s
                üìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π
                
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏""",
                    user.getLastPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    endDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    periodLength);

        } catch (Exception e) {
            log.error("Error marking period end for user {}", chatId, e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—á–Ω—ã—Ö.";
        }
    }

    public String getCurrentStatus(Long chatId) {
        try {
            // –í–ê–ñ–ù–û: –≤—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
            User user = userRepository.findById(chatId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            if (user.getLastPeriodStart() == null) {
                return """
                   ‚ùì –î–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã.
                   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.""";
            }

            LocalDate today = LocalDate.now();
            String phase = getCurrentPhase(user, today);
            long daysUntilNext = ChronoUnit.DAYS.between(today, user.getNextPeriodStart());

            StringBuilder status = new StringBuilder();
            status.append(String.format("""
                üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
                
                üåô –§–∞–∑–∞: %s
                üìÖ –°–µ–≥–æ–¥–Ω—è: %s
                
                üìç –ü–æ—Å–ª–µ–¥–Ω–∏–µ –º–µ—Å—è—á–Ω—ã–µ:
                ü©∏ –ù–∞—á–∞–ª–æ: %s""",
                    phase,
                    today.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getLastPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))));

            if (user.getLastPeriodEnd() != null) {
                status.append(String.format("\nü©∏ –û–∫–æ–Ω—á–∞–Ω–∏–µ: %s",
                        user.getLastPeriodEnd().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"))));
                status.append(String.format("\nüìè –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d –¥–Ω–µ–π", user.getPeriodLength()));
            } else {
                status.append("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /endperiod —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–µ—Ü –º–µ—Å—è—á–Ω—ã—Ö");
            }

            status.append(String.format("""
                
                üîÆ –ü—Ä–æ–≥–Ω–æ–∑:
                ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s (%d –¥–Ω–µ–π)
                üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                
                ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:
                üéØ –°–º–µ—â–µ–Ω–∏–µ –æ–≤—É–ª—è—Ü–∏–∏: %d –¥–Ω–µ–π (—Ü–∏–∫–ª - %d)""",
                    user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    daysUntilNext,
                    user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength(),
                    user.getOvulationOffset(),
                    user.getOvulationOffset()));

            return status.toString();

        } catch (Exception e) {
            log.error("Error getting status for user {}", chatId, e);
            return """
               ‚ùì –î–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã.
               üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.""";
        }
    }

    public String getCalendar(Long chatId) {
        try {
            User user = userService.getUser(chatId);

            if (user.getLastPeriodStart() == null) {
                return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
            }

            return String.format("""
                    üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:
                    
                    ü©∏ –ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                    ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                    üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                    üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                    
                    üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                    user.getLastPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength());

        } catch (Exception e) {
            return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
        }
    }

    public String getHistory(Long chatId) {
        try {
            User user = userService.getUser(chatId);
            List<Cycle> cycles = cycleRepository.findByUserOrderByStartDateDesc(user);

            if (cycles.isEmpty()) {
                return "üìù –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤ –ø—É—Å—Ç–∞.\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª.";
            }

            StringBuilder history = new StringBuilder("üìù –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤:\n\n");
            for (int i = 0; i < Math.min(cycles.size(), 5); i++) {
                Cycle cycle = cycles.get(i);
                history.append(String.format("üîπ %s - %d –¥–Ω–µ–π\n",
                        cycle.getStartDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                        cycle.getCycleLength()));
            }

            if (cycles.size() > 5) {
                history.append(String.format("\n... –∏ –µ—â–µ %d —Ü–∏–∫–ª–æ–≤", cycles.size() - 5));
            }

            return history.toString();

        } catch (Exception e) {
            return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
        }
    }

    private void updateCyclePredictions(User user) {
        if (user.getLastPeriodStart() != null) {
            LocalDate nextPeriod = user.getLastPeriodStart().plusDays(user.getCycleLength());
            LocalDate ovulation = nextPeriod.minusDays(user.getOvulationOffset());

            user.setNextPeriodStart(nextPeriod);
            user.setOvulationDate(ovulation);
        }
    }

    private String getCurrentPhase(User user, LocalDate today) {
        if (today.isBefore(user.getOvulationDate())) {
            return "–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞";
        } else if (today.isEqual(user.getOvulationDate())) {
            return "–û–≤—É–ª—è—Ü–∏—è";
        } else if (today.isBefore(user.getNextPeriodStart())) {
            return "–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞";
        } else {
            return "–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è";
        }
    }
    public String changeCycleStartDate(Long chatId, LocalDate newStartDate) {
        try {
            User user = userRepository.findById(chatId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            if (user.getLastPeriodStart() == null) {
                return """
                   ‚ùå –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –Ω–∞—á–∞—Ç–æ–≥–æ —Ü–∏–∫–ª–∞!
                   
                   üí° –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.""";
            }

            LocalDate oldStartDate = user.getLastPeriodStart();

            // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ü–∏–∫–ª –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            Cycle lastCycle = cycleRepository.findTopByUserOrderByStartDateDesc(user)
                    .orElseThrow(() -> new RuntimeException("Cycle not found"));

            // –ü–†–ê–í–ò–õ–¨–ù–´–ï —Ä–∞—Å—á–µ—Ç—ã
            LocalDate nextPeriod = newStartDate.plusDays(user.getCycleLength());
            LocalDate ovulation = nextPeriod.minusDays(user.getOvulationOffset());

            // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–∏–∫–ª
            lastCycle.setStartDate(newStartDate);
            lastCycle.setPredictedNextStart(nextPeriod);
            cycleRepository.save(lastCycle);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user.setLastPeriodStart(newStartDate);
            user.setNextPeriodStart(nextPeriod);
            user.setOvulationDate(ovulation);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userRepository.save(user);

            return String.format("""
                ‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞!
                
                üìÖ –ë—ã–ª–æ: %s
                üìÖ –°—Ç–∞–ª–æ: %s
                
                üîÑ –ù–æ–≤—ã–µ —Ä–∞—Å—á–µ—Ç—ã:
                ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                    oldStartDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    newStartDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    nextPeriod.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    ovulation.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")));

        } catch (Exception e) {
            log.error("Error changing cycle start date for user {}", chatId, e);
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ü–∏–∫–ª –±—ã–ª –Ω–∞—á–∞—Ç —Ä–∞–Ω–µ–µ.";
        }
    }
}