package com.telegrambot.cyclebot.service;

import com.telegrambot.cyclebot.model.Cycle;
import com.telegrambot.cyclebot.model.User;
import com.telegrambot.cyclebot.repositories.CycleRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class CycleService {

    private final UserService userService;
    private final CycleRepository cycleRepository;

    public String startNewCycle(Long chatId, LocalDate startDate) {
        User user = userService.getUser(chatId);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–∏–∫–ª
        Cycle cycle = new Cycle();
        cycle.setUser(user);
        cycle.setStartDate(startDate);
        cycle.setCycleLength(user.getCycleLength());
        cycle.setPredictedNextStart(startDate.plusDays(user.getCycleLength()));
        cycleRepository.save(cycle);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.setLastPeriodStart(startDate);
        updateCyclePredictions(user);
        userService.registerUser(new org.telegram.telegrambots.meta.api.objects.User(
                user.getChatId(), user.getFirstName(), false,
                user.getLastName(), user.getUsername(), null, false, false, false, false, false
        ), user.getChatId());

        return String.format("""
                ‚úÖ –¶–∏–∫–ª –Ω–∞—á–∞—Ç %s
                
                üìÖ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                startDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                user.getCycleLength());
    }

    public String getCurrentStatus(Long chatId) {
        try {
            User user = userService.getUser(chatId);

            if (user.getLastPeriodStart() == null) {
                return """
                       ‚ùì –î–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã.
                       üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.""";
            }

            LocalDate today = LocalDate.now();
            String phase = getCurrentPhase(user, today);
            long daysUntilNext = ChronoUnit.DAYS.between(today, user.getNextPeriodStart());

            return String.format("""
                    üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:
                    
                    üåô –§–∞–∑–∞: %s
                    üìÖ –°–µ–≥–æ–¥–Ω—è: %s
                    üìç –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s (%d –¥–Ω–µ–π)
                    üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                    
                    üí™ –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π""",
                    phase,
                    today.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    daysUntilNext,
                    user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength());

        } catch (Exception e) {
            return """
                   ‚ùì –î–∞–Ω–Ω—ã–µ –æ —Ü–∏–∫–ª–µ –Ω–µ –≤–≤–µ–¥–µ–Ω—ã.
                   üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ.""";
        }
    }

    public String getCalendar(Long chatId) {
        try {
            User user = userService.getUser(chatId);

            if (user.getLastPeriodStart() == null) {
                return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
            }

            return String.format("""
                    üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:
                    
                    ü©∏ –ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                    ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                    üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                    üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                    
                    üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                    user.getLastPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength());

        } catch (Exception e) {
            return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
        }
    }

    public String getHistory(Long chatId) {
        try {
            User user = userService.getUser(chatId);
            List<Cycle> cycles = cycleRepository.findByUserOrderByStartDateDesc(user);

            if (cycles.isEmpty()) {
                return "üìù –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤ –ø—É—Å—Ç–∞.\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /startperiod —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —Ü–∏–∫–ª.";
            }

            StringBuilder history = new StringBuilder("üìù –ò—Å—Ç–æ—Ä–∏—è —Ü–∏–∫–ª–æ–≤:\n\n");
            for (int i = 0; i < Math.min(cycles.size(), 5); i++) {
                Cycle cycle = cycles.get(i);
                history.append(String.format("üîπ %s - %d –¥–Ω–µ–π\n",
                        cycle.getStartDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                        cycle.getCycleLength()));
            }

            if (cycles.size() > 5) {
                history.append(String.format("\n... –∏ –µ—â–µ %d —Ü–∏–∫–ª–æ–≤", cycles.size() - 5));
            }

            return history.toString();

        } catch (Exception e) {
            return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
        }
    }

    private void updateCyclePredictions(User user) {
        if (user.getLastPeriodStart() != null) {
            LocalDate nextPeriod = user.getLastPeriodStart().plusDays(user.getCycleLength());
            LocalDate ovulation = nextPeriod.minusDays(14);

            user.setNextPeriodStart(nextPeriod);
            user.setOvulationDate(ovulation);
        }
    }

    private String getCurrentPhase(User user, LocalDate today) {
        if (today.isBefore(user.getOvulationDate())) {
            return "–§–æ–ª–ª–∏–∫—É–ª—è—Ä–Ω–∞—è —Ñ–∞–∑–∞";
        } else if (today.isEqual(user.getOvulationDate())) {
            return "–û–≤—É–ª—è—Ü–∏—è";
        } else if (today.isBefore(user.getNextPeriodStart())) {
            return "–õ—é—Ç–µ–∏–Ω–æ–≤–∞—è —Ñ–∞–∑–∞";
        } else {
            return "–ú–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è";
        }
    }
}