package com.telegrambot.cyclebot.bot.command;

import com.telegrambot.cyclebot.model.User;
import com.telegrambot.cyclebot.repositories.UserRepository;
import com.telegrambot.cyclebot.service.CycleService;
import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.extensions.bots.commandbot.commands.IBotCommand;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.bots.AbsSender;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;

import static com.telegrambot.cyclebot.utils.TelegramMessageSender.sendMessage;

@Service
@AllArgsConstructor
@Slf4j
public class CalendarCommand implements IBotCommand {

    private final CycleService cycleService;
    private final UserRepository userRepository;

    @Override
    public String getCommandIdentifier() {
        return "calendar";
    }

    @Override
    public String getDescription() {
        return "–ö–∞–ª–µ–Ω–¥–∞—Ä—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π";
    }

    @Override
    public void processMessage(AbsSender absSender, Message message, String[] arguments) {
        String calendar = cycleService.getCalendar(message.getChatId());

        SendMessage answer = new SendMessage();
        answer.setChatId(message.getChatId());
        answer.setText(calendar);

        sendMessage(answer, absSender);
    }

    // –ò –¥–æ–±–∞–≤–∏–º –º–µ—Ç–æ–¥ –≤ CycleService.java:
    public String getCalendar(Long chatId) {
        try {
            User user = userRepository.findById(chatId)
                    .orElseThrow(() -> new RuntimeException("User not found"));

            if (user.getLastPeriodStart() == null) {
                return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
            }

            long daysUntilNext = ChronoUnit.DAYS.between(LocalDate.now(), user.getNextPeriodStart());

            return String.format("""
                üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π:
                
                ü©∏ –ü–æ—Å–ª–µ–¥–Ω—è—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s
                ü©∏ –°–ª–µ–¥—É—é—â–∞—è –º–µ–Ω—Å—Ç—Ä—É–∞—Ü–∏—è: %s (%d –¥–Ω–µ–π)
                üéØ –û–≤—É–ª—è—Ü–∏—è: %s
                üìè –î–ª–∏–Ω–∞ —Ü–∏–∫–ª–∞: %d –¥–Ω–µ–π
                
                üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /status –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞""",
                    user.getLastPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getNextPeriodStart().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    daysUntilNext,
                    user.getOvulationDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy")),
                    user.getCycleLength());

        } catch (Exception e) {
            return "‚ùì –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ —Å –ø–æ–º–æ—â—å—é /startperiod";
        }
    }
}
